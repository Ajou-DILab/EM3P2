import random
import numpy as np
import torch

def obatin_train_test_tasks(dataset):
    tox21_train_tasks = list(range(9))
    tox21_test_tasks = list(range(9, 12))
    sider_train_tasks = list(range(21))
    sider_test_tasks = list(range(21, 27))
    toxcast_drop_tasks = [343, 348, 349, 352, 354, 355, 356, 357, 358, 360, 361, 362, 364, 367, 368, 369, 370, 371, 372,
                          373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393,
                          394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414,
                          415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 428, 429, 430, 431, 432, 433, 434, 435,
                          436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 474, 475, 477,
                          480, 481, 482, 483]
    toxcast_train_tasks = [x for x in list(range(450)) if x not in toxcast_drop_tasks]
    toxcast_test_tasks = [x for x in list(range(450, 617)) if x not in toxcast_drop_tasks]
    muv_train_tasks = list(range(12))
    muv_test_tasks = list(range(12, 17))
    if dataset == "sider":
        return sider_train_tasks, sider_test_tasks
    elif dataset == "tox21":
        return tox21_train_tasks, tox21_test_tasks
    elif dataset == "muv":
        return muv_train_tasks, muv_test_tasks
    elif dataset == "toxcast":
        return toxcast_train_tasks, toxcast_test_tasks
    else:
        return None, None


def obtain_distr_list(dataset):
    if dataset == "sider":
        return [[684, 743], [431, 996], [1405, 22], [551, 876], [276, 1151], [430, 997], [129, 1298], [1176, 251],
                [403, 1024], [700, 727], [1051, 376], [135, 1292], [1104, 323], [1214, 213], [319, 1108], [542, 885],
                [109, 1318], [1174, 253], [421, 1006], [367, 1060], [411, 1016], [516, 911], [1302, 125], [768, 659],
                [439, 988], [123, 1304], [481, 946]]
    elif dataset == "tox21":
        return [[6956, 309, 566], [6521, 237, 1073], [5781, 768, 1282], [5521, 300, 2010], [5400, 793, 1638], [6605, 350, 876], [6264, 186, 1381], [4890, 942, 1999], [6808, 264, 759], [6095, 372, 1364], [4892, 918, 2021], [6351, 423, 1057]]
    elif dataset == "muv":
        return [[14814, 27], [14705, 29], [14698, 30], [14593, 30], [14873, 29], [14572, 29], [14614, 30], [14383, 28],
                [14807, 29], [14654, 28], [14662, 29], [14615, 29], [14637, 30], [14681, 30], [14622, 29], [14745, 29],
                [14722, 24]]
    elif dataset == "toxcast":
        return [[1288, 443], [1434, 297], [859, 175], [991, 43], [791, 243], [734, 300], [589, 445], [972, 62],
                [943, 91], [955, 64], [906, 113], [903, 131], [1005, 29], [925, 94], [942, 77], [278, 25], [846, 188],
                [884, 135], [817, 217], [736, 283], [974, 60], [989, 45], [1013, 21], [792, 242], [784, 250], [283, 20],
                [962, 72], [930, 104], [837, 197], [823, 211], [259, 44], [254, 49], [249, 54], [264, 39], [248, 55],
                [245, 58], [244, 59], [248, 55], [248, 55], [259, 44], [260, 43], [280, 23], [271, 32], [283, 20],
                [281, 22], [3322, 90], [2789, 623], [3187, 225], [3368, 44], [3389, 23], [3371, 41], [3173, 239],
                [2966, 446], [3310, 102], [3025, 387], [3330, 82], [3375, 37], [3268, 144], [2867, 545], [3352, 60],
                [3051, 361], [3330, 82], [3163, 249], [2708, 704], [3346, 66], [3267, 145], [3086, 326], [3277, 135],
                [3379, 33], [2905, 507], [3196, 216], [2536, 876], [3375, 37], [3377, 35], [3391, 21], [2681, 731],
                [3071, 341], [3329, 83], [3185, 227], [3384, 28], [3310, 102], [3342, 70], [3339, 73], [3246, 166],
                [3359, 53], [3060, 84], [3300, 112], [3365, 47], [3369, 43], [3220, 192], [3261, 151], [3356, 56],
                [3384, 28], [3352, 60], [3183, 229], [3026, 386], [3377, 35], [3362, 50], [3282, 130], [3345, 67],
                [3356, 56], [2988, 424], [3068, 344], [3320, 92], [2938, 474], [3387, 25], [3348, 64], [3310, 102],
                [3386, 26], [3336, 76], [2688, 724], [3389, 23], [3327, 85], [3346, 66], [3375, 37], [3353, 59],
                [3359, 53], [3352, 60], [3382, 30], [3390, 22], [3288, 124], [3360, 52], [3361, 51], [3222, 190],
                [3354, 58], [3136, 276], [3132, 280], [3273, 139], [3255, 157], [3308, 104], [3356, 56], [2118, 1294],
                [3381, 31], [3198, 214], [3375, 37], [2858, 554], [3381, 31], [3018, 394], [3374, 38], [3173, 239],
                [3340, 72], [2479, 933], [3319, 93], [2879, 533], [3079, 333], [1767, 1645], [3389, 23], [2441, 971],
                [2952, 460], [3165, 247], [3334, 78], [3274, 138], [3387, 25], [3346, 66], [3355, 57], [3382, 30],
                [3034, 378], [3357, 55], [3382, 30], [3376, 36], [3388, 24], [3303, 109], [3313, 99], [2885, 527],
                [3368, 44], [2879, 533], [3312, 100], [3370, 42], [3379, 33], [3187, 225], [3377, 35], [3060, 352],
                [3346, 66], [3289, 123], [3383, 29], [3175, 237], [2949, 463], [3371, 41], [3288, 124], [3274, 138],
                [3373, 39], [3300, 112], [3392, 20], [2481, 931], [3387, 25], [3362, 50], [2640, 253], [3382, 30],
                [2951, 461], [3072, 340], [3324, 88], [1038, 401], [887, 552], [1234, 205], [1109, 330], [1058, 381],
                [1248, 191], [839, 600], [962, 477], [1377, 62], [1300, 139], [1118, 321], [1379, 60], [1085, 354],
                [1003, 436], [1021, 418], [1000, 439], [1056, 383], [1037, 402], [1417, 22], [1047, 392], [1014, 425],
                [1223, 216], [1092, 347], [1418, 21], [1052, 387], [1168, 271], [1055, 384], [1247, 192], [1248, 191],
                [1308, 131], [1145, 294], [1230, 209], [1209, 230], [1193, 246], [1238, 201], [1400, 39], [1199, 240],
                [1148, 291], [1229, 210], [1391, 48], [1293, 146], [1275, 164], [1356, 83], [1225, 214], [1407, 32],
                [1174, 265], [1417, 22], [1281, 158], [995, 444], [1411, 28], [1261, 178], [1404, 35], [1187, 252],
                [1365, 74], [1187, 252], [1218, 221], [1154, 285], [1401, 38], [1192, 247], [1416, 23], [1212, 227],
                [1141, 298], [1115, 324], [1415, 24], [1180, 259], [1414, 25], [1049, 390], [1205, 234], [1145, 294],
                [1114, 325], [1172, 267], [1015, 424], [1132, 307], [1417, 22], [1130, 309], [1418, 21], [1119, 320],
                [1409, 30], [1114, 325], [1043, 396], [1141, 298], [1343, 96], [1066, 373], [1145, 294], [1364, 75],
                [1202, 237], [1384, 55], [999, 440], [997, 442], [996, 443], [1036, 403], [1030, 409], [1393, 46],
                [1092, 347], [1396, 43], [1091, 348], [1206, 233], [1117, 322], [1364, 75], [876, 563], [1077, 362],
                [1001, 438], [1341, 98], [1376, 63], [1246, 193], [1019, 420], [1022, 417], [1143, 296], [1173, 266],
                [1376, 63], [1043, 396], [815, 624], [1107, 332], [1170, 269], [1027, 412], [298, 204], [315, 187],
                [367, 135], [363, 133], [421, 75], [464, 36], [422, 78], [453, 49], [430, 72], [406, 56], [349, 151],
                [381, 119], [346, 123], [355, 145], [281, 19], [277, 23], [175, 121], [185, 110], [198, 104],
                [168, 134], [147, 153], [218, 84], [128, 171], [138, 162], [120, 182], [178, 114], [178, 116],
                [251, 45], [271, 29], [274, 25], [258, 42], [251, 51], [234, 66], [172, 201], [274, 99], [142, 176],
                [66, 307], [22, 31], [220, 483], [168, 71], [105, 70], [39, 134], [86, 27], [35, 101], [76, 301],
                [38, 187], [37, 80], [75, 85], [49, 28], [23, 31], [74, 68], [90, 21], [72, 23], [80, 90], [42, 37],
                [99, 31], [43, 60], [80, 81], [59, 54], [135, 30], [196, 24], [55, 44], [37, 45], [55, 35], [70, 34],
                [71, 22], [58, 39], [53, 26], [80, 58], [112, 68], [92, 20], [65, 31], [63, 24], [54, 25], [51, 24],
                [76, 32], [29, 38], [88, 26], [69, 29], [42, 21], [130, 24], [56, 84], [42, 61], [50, 49], [56, 39],
                [31, 84], [42, 64], [57, 71], [76, 56], [52, 54], [74, 38], [23, 32], [50, 85], [43, 77], [36, 53],
                [37, 28], [45, 57], [54, 92], [62, 47], [66, 89], [35, 65], [40, 120], [46, 21], [34, 84], [20, 66],
                [30, 61], [31, 81], [38, 57], [38, 40], [61, 25], [32, 98], [53, 72], [21, 57], [33, 57], [49, 22],
                [26, 57], [43, 75], [32, 70], [49, 81], [85, 79], [47, 60], [75, 114], [34, 61], [41, 70], [43, 29],
                [44, 48], [41, 51], [40, 53], [25, 53], [42, 23], [66, 46], [57, 28], [57, 72], [57, 65], [36, 34],
                [912, 30], [25, 30], [41, 58], [26, 77], [51, 40], [31, 71], [35, 54], [41, 117], [42, 25], [43, 23],
                [24, 26], [37, 25], [53, 31], [132, 216], [115, 218], [924, 130], [108, 77], [98, 206], [116, 112],
                [194, 83], [896, 232], [131, 33], [197, 60], [119, 226], [304, 72], [600, 180], [194, 87], [403, 111],
                [230, 30], [144, 22], [168, 55], [740, 188], [139, 131], [76, 21], [38, 107], [50, 123], [26, 51],
                [49, 194], [68, 161], [64, 39], [39, 39], [52, 61], [52, 50], [1627, 145], [1621, 119], [1525, 208],
                [1614, 134], [1566, 108], [1536, 219], [1469, 199], [1536, 208], [1488, 178], [1588, 183], [1610, 148],
                [1419, 316], [1541, 141], [1553, 205], [1648, 89], [6818, 369], [6549, 638], [5573, 1614], [7101, 86],
                [7907, 24], [7543, 388], [7521, 410], [7889, 42], [7727, 204], [6756, 1175], [7332, 599], [7546, 385],
                [7081, 850], [6019, 1168], [7123, 808], [6658, 1273], [7881, 50], [7879, 52], [7880, 51], [7907, 24],
                [7882, 49], [7908, 23], [5137, 134], [7634, 297], [7463, 468], [7461, 470], [7631, 300], [7675, 256],
                [6901, 1030], [7731, 200], [6675, 1256], [7216, 715], [7093, 94], [7077, 110], [6854, 333], [6954, 233],
                [6827, 360], [6900, 287], [7003, 184], [6980, 207], [6231, 956], [6854, 333], [7601, 330], [7702, 229],
                [7429, 502], [7394, 537], [7473, 458], [7531, 400], [6892, 295], [6814, 373], [6577, 610], [7018, 169],
                [4415, 856], [5150, 121], [4968, 303], [6891, 296], [7083, 104], [6944, 243], [6738, 449], [6535, 652],
                [7067, 120], [7167, 20], [7000, 187], [6993, 194], [6746, 441], [7154, 33], [7907, 24], [7697, 234],
                [7577, 354], [7158, 29], [6639, 548], [7028, 159], [7893, 38], [6170, 1761], [6557, 630], [7010, 177],
                [7123, 64], [7117, 70], [6873, 314], [6909, 278], [7361, 570], [7460, 471], [7117, 814], [7537, 394],
                [7404, 527], [7130, 801], [6900, 1031], [7133, 798], [7252, 679], [7220, 711], [6972, 959], [7498, 433],
                [7273, 658], [7360, 571], [6982, 949], [7260, 671], [7577, 354], [7288, 643], [7048, 883], [7603, 328],
                [907, 114], [838, 196], [958, 63], [971, 50], [1001, 20], [940, 81], [906, 115], [909, 125], [977, 44],
                [900, 121], [964, 57], [974, 47], [910, 111], [981, 40], [986, 35], [962, 59], [938, 83], [892, 129]]
    else:
        return None


def sample_inds(data, size):
    len_data = len(data)
    if len_data >= size:
        return random.sample(data, size)
    else:
        return random.sample(data, len_data) + sample_inds(data, size - len_data)


def sample_meta_datasets(data, dataset, task, n_shot, n_query,random_pick):
    pseudo_adapt = None
    distri_list = obtain_distr_list(dataset)
    
    thresh1 = distri_list[task][0]
    thresh2 = distri_list[task][0]+distri_list[task][1]
    
    neg_sample = sample_inds(range(0, thresh1), n_shot)
    pos_sample = sample_inds(range(thresh1, thresh2), n_shot)
    
    
    if dataset == "tox21":
        unlabeled_sample = [i for i in range(thresh2, len(data))]
        pseudo_adapt = data[torch.tensor(unlabeled_sample)]
        
    s_list_1 = neg_sample[:n_shot] + pos_sample[:n_shot]
    
    if random_pick:
        s_adapt = data[torch.tensor(s_list_1)]
        l = [i for i in range(0, thresh2) if i not in s_list_1]
        q_sample = sample_inds(l, n_query)
        q_list_1 = q_sample[:n_query]
        random.shuffle(l)
        q_adapt = data[torch.tensor(q_list_1)]
    
    else:
        neg_query = [i for i in range(0, thresh1) if i not in s_list_1]
        pos_query = [i for i in range(thresh1, thresh2) if i not in s_list_1]

        #ratio = np.round(thresh1/thresh2,1) # neg
        #print(ratio ,n_query*ratio,n_query*(1-ratio) )

        neg_query_sample = sample_inds(neg_query, n_query)
        pos_query_sample = sample_inds(pos_query, n_query)

        print(len(neg_query_sample),len(pos_query_sample))
        l = neg_query_sample + pos_query_sample



        s_adapt = data[torch.tensor(s_list_1)]
        ###

        ###

        q_adapt = data[torch.tensor(l)]

        #txt = [q_adapt[i]['y'] for i in range(len(q_adapt))]
        #print(txt)
        # support 와 query
    
    
    
    return s_adapt, q_adapt

def sample_test_datasets(data, dataset, task, n_shot, n_query, update_step=1,flag=True):
    pseudo_data = None
    distri_list = obtain_distr_list(dataset)
    thresh1 = distri_list[task][0]
    thresh2 = distri_list[task][0]+distri_list[task][1]

    
    if flag:
        neg_sample = sample_inds(range(0, thresh1), n_shot)
        pos_sample = sample_inds(range(thresh1, thresh2), n_shot)
    else :
        neg_sample = [i for i in range(n_shot)]
        pos_sample = [i+thresh1 for i in range(n_shot)]
    if dataset == "tox21" :
        unlabeled_sample = [i for i in range(thresh2, len(data))]
        pseudo_data = data[torch.tensor(unlabeled_sample)]
    
    s_list = neg_sample + pos_sample

    q_list = [i for i in range(0, thresh2) if i not in s_list]

    #s_data : meta test support / q_data : meta test query / q_sample : meta test query sampling
    s_data = data[torch.tensor(s_list)]
    
    q_data = data[torch.tensor(q_list)]

    
    q_sample = sample_inds(q_list, update_step * n_query)
    
    q_data_adapt = data[torch.tensor(q_sample)]

    return s_data, q_data

#test task에 대해서는 30%를 test data로 설정해놓고
#support data의 데이터를 ex) 10% 30% 50% 70%
#test_update_step은 그 내에서 batch단위로
def new_sample_test_datasets(data, dataset, task, n_support=0.7, n_query =0.3, update_step=1,flag=True):
    distri_list = obtain_distr_list(dataset)
    thresh1 = distri_list[task][0]
    thresh2 = distri_list[task][0]+distri_list[task][1]
    num_train = int(n_support*thresh2)
    #print how many data is used for training
    print(num_train)

    s_list = sample_inds(range(0,thresh2),num_train)
    q_list = [i for i in range(0, thresh2) if i not in s_list]

    s_data = data[torch.tensor(s_list)]
    q_data = data[torch.tensor(q_list)]
    return s_data, q_data

def sample_all(data,dataset):
    print(data,dataset)
    distri_list = obtain_distr_list(dataset)
    if dataset =="tox21" :
        thresh = range(7831)
    else: #sider
        thresh = range(1427)
    print(thresh)
    data[torch.tensor(thresh)]
    return data